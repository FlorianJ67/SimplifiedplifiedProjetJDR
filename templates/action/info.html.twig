{% extends 'base.html.twig' %}

{% block title %}info Action {{ action.personnage }}{% endblock %}

{% block description %}<meta name="description" content="Information de l'action du personnage {{ action.personnage }}">{% endblock %}

{% block header %}
    {{ include('header.html.twig') }}
{% endblock %}

{% block body %}
<h2>Action</h2>
<div id="resumePerso">
    <p>{{ action.personnage }}</p>
    {% if action.objet %}
        <p>{{ action.objet }}</p>
        <div>
            {% set damageWeap = action.objet.valeur|split('d') %}
            {% if damageWeap|length > 1  %}
                {% set damageWeap2 = damageWeap[1]|split('+') %}
                {% if damageWeap|length > 1 %}
                    <p id="resumeDmg">Calcule de Dégats: {{ damageWeap[0] }} dés {{ damageWeap2[0] }} + {{ damageWeap2[1] }}</p>
                {% else %} 
                    <p id="resumeDmg">Calcule de Dégats: {{ damageWeap[0] }} dés {{ damageWeap2[0] }} </p>
                {% endif %}
            {% else %}
                <p id="resumeDmg">Calcule de Dégats: 1 dés {{ damageWeap[0] }} </p>
            {% endif %}
            <button id="damageBtn" type="button" onclick="damageCalculator()">Lancé le jet de dégats</button>
            <div id="resultDamage" >
                
            </div>
        </div>
    {% endif %}
    <p>basé sur un lancé de dé {{ action.dice }}</p>
    {% set zero = true %}
    {% set ignoreCarac = false %}
    <p> Résultat:
    {% if action.competence %}
    <!-- Si une compétence a été selectionner -->
        {% for comp in action.personnage.competencePersos %}
            <!-- On vérifie si le personnage possède la compétence -->
            {% if comp.competence == action.competence %}
                {% for carac in comp.competence.competenceInflueCaracs|slice(0, 1) %}
                <!-- On cherche la caractéristique lié à la compétence -->
                    {% for caracPerso in action.personnage.caracteristiquePersos %}
                    <!-- On cherche la valeur de la caracteristique du personnage -->
                        {% if caracPerso.caracteristique == carac.caracteristique %}
                        <!-- On vérifie si le personnage a la caractérisitique lié a la compétence -->
                            {% if carac.valeurBonus|first == "x" or carac.valeurBonus|first == "*" %}
                            <!-- Si la valeur du bonus commence par "x" ou "*" on considère que c'est une multiplication -->
                                {{ action.diceScore + (caracPerso.valeur * carac.valeurBonus|slice(1)) }}
                                ({{ action.diceScore }}+({{ caracPerso.valeur }}x{{ carac.valeurBonus|slice(1) }}))
                                {% set ignoreCarac = true %}
                            {% elseif carac.valeurBonus|first == "+" %}
                            <!-- Si la valeur du bonus commence par un +  -->
                                {{ action.diceScore + (caracPerso.valeur + carac.valeurBonus|slice(1)) }}
                                ({{ action.diceScore }}+({{ caracPerso.valeur }}+{{ carac.valeurBonus|slice(1) }}))
                                {% set ignoreCarac = true %}
                            {% elseif carac.valeurBonus matches '/^\d+$/' %}
                            <!-- Si la valeur du bonus est composé uniquement de chiffre -->
                                {{ action.diceScore + (caracPerso.valeur + carac.valeurBonus) }}
                                ({{ action.diceScore }}+({{ caracPerso.valeur }}+{{ carac.valeurBonus }}))
                                {% set ignoreCarac = true %}                                
                            {% endif %}
                            {% set zero = false %}
                            <!-- Si la caractéristique apparait chez le personne on change la varible "zero" afin de passer l'étape du cas où le personnage n'a pas la compétence ni la caractéristique -->
                        {% endif %}
                    {% endfor %}
                {% endfor %}
            {% endif %}
        {% endfor %}
    {% elseif action.caracteristique and ignoreCarac == false %}
    <!-- Si une caractéristique a été selectionner et que l'action n'a pas déjà été calculé via une compétence -->
        {% for carac in action.personnage.caracteristiquePersos %}
        <!-- On vérifie si le personnage possède la caractéristique -->
            {% if carac.caracteristique == action.caracteristique %}     
                {% if action.objet %}
                <!-- Si l'action possède un objet -->
                    {{ action.diceScore + carac.valeur + action.objet.valeur }}
                {% else %}
                <!-- Sinon -->
                    {{ action.diceScore + carac.valeur }}
                {% endif %}
                {% set zero = false %}
                <!-- Si la caractéristique apparait chez le personne on change la varible "zero" afin de passer l'étape du cas où le personnage n'a pas la compétence ni la caractéristique -->
            {% endif %}
        {% endfor %}
    {% endif %}
    {% if zero == true %}
        {% if action.objet and action.objet.valeur matches '/^\\d+$/'  %}
            {{  action.diceScore + action.objet.valeur }}
        {% else %}
            {{  action.diceScore }}
        {% endif %}
    {% endif %}
    {% if action.diceScore == 1 %}
    <!-- Si le lancé de dée fait le jet minimum -->
        Échec critique !
    {% elseif action.diceScore == action.dice %}
    <!-- Si le lancé de dée fait le jet maximum -->
        Coup Critique !
    {% endif %}
    </p>
</div>
{% endblock %}

{% block javascripts %}
<script>
    // On définie nos variables
    let calculDamageBtn = document.getElementById("damageBtn");
    let resultDamage = document.getElementById("resultDamage");
    let resumeDmg = document.getElementById("resumeDmg").textContent;
    resumeDmg = resumeDmg.replace('Calcule de Dégats: ','');

    // Fonction qui génère un nombre aléatoir allant de 0 à "max"
    function getRandomInt(max) {
        return Math.floor(Math.random() * max);
    }

    function damageCalculator() {
        // On vide le contenu de la div dans laquel les infos du jet de dé seront affichés
        resultDamage.innerHTML = "";
        // On sépare la chaine de caractère en deux avec comme point de rupture ' dés ' exclu
        let dmgFormula = resumeDmg.split(' dés ');

        let bonusDmg = 0;
        // Si la séparation a eu lieu
        if(dmgFormula.length > 1) {
            // On définie le nombre de dés (on le convertie avec Nmber en format numériques)
            diceQte = Number(dmgFormula[0]);
            // On sépare la chaine de caractère restante avec comme point de rupture ' + ' exclu
            diceNbrAndBonus = dmgFormula[1].split(' + ');
            // Si la séparation a eu lieu
            if(diceNbrAndBonus.length > 1) {
                // On définie le nombre de face du dé (on le convertie avec Nmber en format numériques)
                diceNbr = Number(diceNbrAndBonus[0]);
                // On définie le bonus a attribué a la fin du jet (on le convertie avec Nmber en format numériques)
                bonusDmg = Number(diceNbrAndBonus[1]);
            } else {
                // On définie uniquement le nombre de face du dé (sans bonus) (on le convertie avec Nmber en format numériques)
                diceNbr = Number(diceNbrAndBonus[0]);
            }
        } else {
            // On définie uniquement le nombre de face du dé (sans nombre de dés ni bonus) (on le convertie avec Nmber en format numériques)
            diceNbr = Number(dmgFormula[0]);
        }
        // On instancie un tableau dans lequel on stock le résultat du jet de dé
        let diceScore = []
        // Dans le cas ou l'on a un nombre de dé (ET un nombre de face du dé)
        if (diceQte && diceNbr) {
            // Pour chaque dé
            for (let i = 0; i < diceQte; i++) {
                // On génère les lancé via la fonction getRandomInt
                diceScore.push(getRandomInt(diceNbr));
            }
        } else {
            // On génère le lancé via la fonction getRandomInt
            diceScore.push(getRandomInt(diceNbr));
        }
        // On instancie le score final
        let totalScore = 0;        
        // Pour chaque dé
        for (let i = 0; i < diceQte; i++) {
            // On additionne les scores des dés
            totalScore += diceScore[i] +1;
        }
        // S'il y a un bonus de dégats
        if (bonusDmg != 0) {
            // On ajoute le bonus au total des score de dé
            totalScore += bonusDmg;
        }
        // On crée un texte avec comme contenu ' "Score: " + totalScore '
        const textnode = document.createTextNode("Score: " + totalScore);
        // On crée une balise de texte
        let node = document.createElement("p");
        // On injecte notre texte dans la balise de texte
        node.appendChild(textnode);
        // On injecte dans notre balise conténaire notre balise texte
        resultDamage.appendChild(node);
        // Pour chaque lancé de dés
        for (let i = 0; i < diceScore.length; i++) {
            // On crée une balise de texte
            let node = document.createElement("p");
            // On crée un texte avec comme contenu 'i.dé "nombre de face du dé" : "score du lancé" '
            let textnode = document.createTextNode((i+1) + ".dé "+ diceNbr + ": " + (diceScore[i] + 1));
            // On injecte notre texte dans la balise de texte
            node.appendChild(textnode);
            // On injecte dans notre balise conténaire notre balise texte
            resultDamage.appendChild(node);
        }
        // Si il y a un bonus sur le calcul
        if (bonusDmg) {
            // On crée une balise de texte
            let node = document.createElement("p");
            // On crée un texte avec comme contenu 'Bonus: + "le bonus" '
            let textnode = document.createTextNode("Bonus: +" + bonusDmg);
            // On injecte notre texte dans la balise de texte
            node.appendChild(textnode);
            // On injecte dans notre balise conténaire notre balise texte
            resultDamage.appendChild(node);
        }
    }
</script>
{% endblock %}

{% block footer %}
    {{ include('footer.html.twig') }} 
{% endblock %}